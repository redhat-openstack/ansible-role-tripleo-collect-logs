---
# tasks file for ansible-role-tripleo-collect-logs

- name: Ensure required rpms for logging are installed
  yum: name={{ item }} state=present
  with_items:
    - gzip
    - tar

- name: Collect list of installed rpms
  shell: rpm -qa > /var/log/rpm.list

- name: Collect list of running kernel modules
  shell: lsmod > /var/log/module_list
  ignore_errors: true

- name: Prepare directory with extra logs
  file: dest=/var/log/extra state=directory
  ignore_errors: true

- name: Collect logs from all failed systemd services
  shell: |
    systemctl -t service --failed --no-legend | awk '{print $1}' \
        | xargs -r -n1 journalctl -u > /var/log/extra/services 2>&1
  ignore_errors: true

- name: Collect network status info
  shell: |
    (ip a; ip r; iptables-save;iptables -nL) &> /var/log/extra/network;
    (for NS in $(ip netns list); do
      echo "==== $NS ====";
      ip netns exec $NS ip a;
      ip netns exec $NS ip r;
      ip netns exec $NS ip iptables-save;
      PIDS="$(ip netns pids $NS)";
      [[ ! -z "$PIDS" ]] && ps --no-headers -f --pids "$PIDS";
      echo "";
      done) &> /var/log/extra/network-netns
    (for NB in $(ovs-vsctl show | grep Bridge |awk '{print $2}'); do
      echo "==== Bridge name - $NB ====";
      ovs-ofctl show $NB
      ovs-ofctl dump-flows $NB
      echo "";
      done;ovsdb-client dump) &> /var/log/extra/network-bridges
  ignore_errors: true

- shell: "lsof -P &> /var/log/extra/lsof"
  ignore_errors: true

- shell: "pstree -p &> /var/log/extra/pstree"
  ignore_errors: true

- shell: "sysctl -a &> /var/log/extra/sysctl"
  ignore_errors: true

- shell: "netstat -lnp &> /var/log/extra/netstat"
  ignore_errors: true

- shell: "which openstack-status &> /dev/null && (. ~/keystonerc_admin; openstack-status &> /var/log/extra/openstack-status)"
  when: "'controller' in inventory_hostname"
  ignore_errors: true

- shell: "lsmod &> /var/log/extra/lsmod"
  ignore_errors: true

- shell: "lspci &> /var/log/extra/lspci"
  ignore_errors: true

- shell: "pip list &> /var/log/extra/pip"
  ignore_errors: true

- shell: "(vgs; pvs; lvs) &> /var/log/extra/lvm"
  ignore_errors: true

- name: Generate human-readable SAR logs
  shell: "[[ -f /usr/lib64/sa/sa2 ]] && /usr/lib64/sa/sa2 -A"
  ignore_errors: true

- name: Search for AVC denied
  sudo: yes
  shell: "! grep -i denied /var/log/audit/audit*"
  register: result
  ignore_errors: yes

- name: Publish the count of AVC denials as fact
  set_fact:
    selinux_problems_found: "{{ result.stdout_lines }}"
  ignore_errors: yes

- name: Search for segfaults in logs
  sudo: yes
  shell: "! grep -v ansible-command /var/log/messages | grep segfault"
  register: result
  ignore_errors: yes

- name: Publish the count of segfaults as fact
  set_fact:
    segfault_problems_found: "{{ result.stdout_lines }}"
  ignore_errors: yes

- name: Search for oom-killer instances in logs
  sudo: yes
  shell: "! grep -v ansible-command /var/log/messages | grep oom-killer"
  register: result
  ignore_errors: yes

- name: Publish the count of oom-killer instances as fact
  set_fact:
    oom_killer_problems_found: "{{ result.stdout_lines }}"
  ignore_errors: yes

- name: Erase temporary log directory if exists
  file: path=/tmp/{{ inventory_hostname }} state=absent
  ignore_errors: true

- name: Collect logs
  shell: |
    mkdir -p /tmp/{{ inventory_hostname }};
    for F in $(ls -d1 /var/log/rpm.list /var/log/extra {{ archive_list|join(' ') }}); do
      cp -rL --parents $F /tmp/{{ inventory_hostname }}
    done;
    find /tmp/{{ inventory_hostname }} -type d -print0 | xargs -0 chmod 755;
    find /tmp/{{ inventory_hostname }} -type f -print0 | xargs -0 chmod 644;
  ignore_errors: true

- name: Compress logs in tar.gz
  shell: |
    chdir=/tmp
    tar czf {{ inventory_hostname }}.tar.gz {{ inventory_hostname }};
  ignore_errors: true
  when: not gzip_only

- name: gzip logs individually and tar them
  shell: |
    chdir=/tmp
    gzip -r ./{{ inventory_hostname }};
    tar cf {{ inventory_hostname }}.tar {{ inventory_hostname }};
  ignore_errors: true
  when: gzip_only

- name: Fetch log archive (tar.gz)
  fetch:
    src: "/tmp/{{ inventory_hostname }}.tar.gz"
    dest: "{{ lookup('env', 'PWD') }}/collected_files/{{ inventory_hostname }}.tar.gz"
    flat: yes
    validate_checksum: no
  ignore_errors: true
  when: not gzip_only

- name: Fetch log archive (tar)
  fetch:
    src: "/tmp/{{ inventory_hostname }}.tar"
    dest: "{{ lookup('env', 'PWD') }}/collected_files/{{ inventory_hostname }}.tar"
    flat: yes
    validate_checksum: no
  ignore_errors: true
  when: gzip_only

- name: Delete temporary log directory after collection
  file: path=/tmp/{{ inventory_hostname }} state=absent
  ignore_errors: true

- name: Extract the logs
  local_action: unarchive src="{{ lookup('env', 'PWD') }}/collected_files/{{ inventory_hostname }}.tar" dest="{{ lookup('env', 'PWD') }}/collected_files/"
  sudo: no
  ignore_errors: true
  when: gzip_only

- name: delete the tar file after extraction
  local_action: file path="{{ lookup('env', 'PWD') }}/collected_files/{{ inventory_hostname }}.tar" state=absent
  sudo: no
  ignore_errors: true
  when: gzip_only

# The below tasks all execute from the localhost and expect the PROVISIONER_KEY and BUILD_URL env variables to be set
- name: ensure collected_files dir exists
  file:
    path: "{{ lookup('env', 'PWD') }}/collected_files"
    state: directory
  delegate_to: localhost

- name: fetch and gzip the console log
  shell: |
    curl {{ lookup('env', 'BUILD_URL') }}/consoleText | gzip > {{ lookup('env', 'PWD') }}/collected_files/console.txt.gz
  ignore_errors: true
  when: rsync_logs and "{{ lookup('env', 'BUILD_URL') }}" != ""
  delegate_to: localhost

- name: upload to the artifact server using password
  shell:
    RSYNC_PASSWORD=`echo $PROVISIONER_KEY|cut -b 1-13` rsync -av {{ lookup('env', 'PWD') }}/collected_files/ {{ job.rsync_path }}/$BUILD_TAG
  ignore_errors: true
  when: rsync_logs and "{{ lookup('env', 'PROVISIONER_KEY') }}" != ""
  delegate_to: localhost

- name: upload to the artifact server using pubkey auth
  shell:
    rsync -av {{ base_dir }}/khaleesi/collected_files/ {{ job.rsync_path }}/$BUILD_TAG
  ignore_errors: true
  when: rsync_logs and "{{ lookup('env', 'PROVISIONER_KEY') }}" == ""
  delegate_to: localhost

- name: create the artifact location redirect file
  template:
    src: full_logs.html.j2
    dest: "{{ lookup('env', 'PWD') }}/collected_files/full_logs.html"
  ignore_errors: true
  when: rsync_logs
  delegate_to: localhost
